/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */
#define SWIGMODULE djondb

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef int intgo;
typedef unsigned int uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static void *_swig_goallocate(size_t len) {
  struct {
    size_t len;
    void *ret;
  } a;
  a.len = len;
  crosscall2(_cgo_allocate, &a, (int) sizeof a);
  return a.ret;
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




static _gostring_ _swig_makegostring(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)_swig_goallocate(l + 1);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}

#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


#include <string>


#include <vector>
#include <stdexcept>


#include "includes/bsonarrayobj.h"
#include "includes/bson.h"
#include "includes/bsonobj.h"
#include "includes/bsonparser.h"
#include "includes/filterdefs.h"
#include "includes/bsonutil.h"
#include "includes/djondbconnection.h"
#include "includes/djondbcursor.h"
#include "includes/djondbconnectionmanager.h"
#include "includes/djondb_client.h"

SWIGINTERN std::vector< BSONObj * >::const_reference std_vector_Sl_BSONObj_Sm__Sg__get(std::vector< BSONObj * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_BSONObj_Sm__Sg__set(std::vector< BSONObj * > *self,int i,std::vector< BSONObj * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
#ifdef __cplusplus
extern "C" {
#endif

void
_wrap_new_BSONObjVectorPtr__SWIG_0(void *swig_v)
{
  std::vector< BSONObj * > *result = 0 ;
  
  struct swigargs {
    long : 0;
    std::vector< BSONObj * > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (std::vector< BSONObj * > *)new std::vector< BSONObj * >();
  *(std::vector< BSONObj * > **)&swig_a->result = result; 
}


void
_wrap_new_BSONObjVectorPtr__SWIG_1(void *swig_v)
{
  std::vector< BSONObj * >::size_type arg1 ;
  std::vector< BSONObj * > *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    std::vector< BSONObj * > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (size_t)swig_a->arg1; 
  
  result = (std::vector< BSONObj * > *)new std::vector< BSONObj * >(arg1);
  *(std::vector< BSONObj * > **)&swig_a->result = result; 
}


void
_wrap_BSONObjVectorPtr_size(void *swig_v)
{
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  std::vector< BSONObj * >::size_type result;
  
  struct swigargs {
    std::vector< BSONObj * > *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< BSONObj * > **)&swig_a->arg1; 
  
  result = ((std::vector< BSONObj * > const *)arg1)->size();
  swig_a->result = result; 
}


void
_wrap_BSONObjVectorPtr_capacity(void *swig_v)
{
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  std::vector< BSONObj * >::size_type result;
  
  struct swigargs {
    std::vector< BSONObj * > *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< BSONObj * > **)&swig_a->arg1; 
  
  result = ((std::vector< BSONObj * > const *)arg1)->capacity();
  swig_a->result = result; 
}


void
_wrap_BSONObjVectorPtr_reserve(void *swig_v)
{
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  std::vector< BSONObj * >::size_type arg2 ;
  
  struct swigargs {
    std::vector< BSONObj * > *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< BSONObj * > **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  (arg1)->reserve(arg2);
  
}


void
_wrap_BSONObjVectorPtr_isEmpty(void *swig_v)
{
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  bool result;
  
  struct swigargs {
    std::vector< BSONObj * > *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< BSONObj * > **)&swig_a->arg1; 
  
  result = (bool)((std::vector< BSONObj * > const *)arg1)->empty();
  swig_a->result = result; 
}


void
_wrap_BSONObjVectorPtr_clear(void *swig_v)
{
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  
  struct swigargs {
    std::vector< BSONObj * > *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< BSONObj * > **)&swig_a->arg1; 
  
  (arg1)->clear();
  
}


void
_wrap_BSONObjVectorPtr_add(void *swig_v)
{
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  std::vector< BSONObj * >::value_type *arg2 = 0 ;
  std::vector< BSONObj * >::value_type temp2 = 0 ;
  
  struct swigargs {
    std::vector< BSONObj * > *arg1;
    BSONObj **arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< BSONObj * > **)&swig_a->arg1; 
  
  temp2 = *(std::vector< BSONObj * >::value_type *)&swig_a->arg2;
  arg2 = (std::vector< BSONObj * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< BSONObj * >::value_type const &)*arg2);
  
}


void
_wrap_BSONObjVectorPtr_get(void *swig_v)
{
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  int arg2 ;
  std::vector< BSONObj * >::value_type *result = 0 ;
  
  struct swigargs {
    std::vector< BSONObj * > *arg1;
    intgo arg2;
    long : 0;
    BSONObj **result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< BSONObj * > **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  try {
    result = (std::vector< BSONObj * >::value_type *) &std_vector_Sl_BSONObj_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
  *(std::vector< BSONObj * >::value_type *)&swig_a->result = *result; 
}


void
_wrap_BSONObjVectorPtr_set(void *swig_v)
{
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  int arg2 ;
  std::vector< BSONObj * >::value_type *arg3 = 0 ;
  std::vector< BSONObj * >::value_type temp3 = 0 ;
  
  struct swigargs {
    std::vector< BSONObj * > *arg1;
    intgo arg2;
    BSONObj **arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< BSONObj * > **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  temp3 = *(std::vector< BSONObj * >::value_type *)&swig_a->arg3;
  arg3 = (std::vector< BSONObj * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_BSONObj_Sm__Sg__set(arg1,arg2,(BSONObj *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
  
}


void
_wrap_delete_BSONObjVectorPtr(void *swig_v)
{
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  
  struct swigargs {
    std::vector< BSONObj * > *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< BSONObj * > **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_StringVector__SWIG_0(void *swig_v)
{
  std::vector< std::string > *result = 0 ;
  
  struct swigargs {
    long : 0;
    std::vector< std::string > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&swig_a->result = result; 
}


void
_wrap_new_StringVector__SWIG_1(void *swig_v)
{
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    std::vector< std::string > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (size_t)swig_a->arg1; 
  
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&swig_a->result = result; 
}


void
_wrap_StringVector_size(void *swig_v)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  struct swigargs {
    std::vector< std::string > *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< std::string > **)&swig_a->arg1; 
  
  result = ((std::vector< std::string > const *)arg1)->size();
  swig_a->result = result; 
}


void
_wrap_StringVector_capacity(void *swig_v)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  struct swigargs {
    std::vector< std::string > *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< std::string > **)&swig_a->arg1; 
  
  result = ((std::vector< std::string > const *)arg1)->capacity();
  swig_a->result = result; 
}


void
_wrap_StringVector_reserve(void *swig_v)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  struct swigargs {
    std::vector< std::string > *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< std::string > **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  (arg1)->reserve(arg2);
  
}


void
_wrap_StringVector_isEmpty(void *swig_v)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  struct swigargs {
    std::vector< std::string > *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< std::string > **)&swig_a->arg1; 
  
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  swig_a->result = result; 
}


void
_wrap_StringVector_clear(void *swig_v)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  struct swigargs {
    std::vector< std::string > *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< std::string > **)&swig_a->arg1; 
  
  (arg1)->clear();
  
}


void
_wrap_StringVector_add(void *swig_v)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  struct swigargs {
    std::vector< std::string > *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< std::string > **)&swig_a->arg1; 
  
  std::vector< std::string >::value_type arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
  
}


void
_wrap_StringVector_get(void *swig_v)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  struct swigargs {
    std::vector< std::string > *arg1;
    intgo arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< std::string > **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_StringVector_set(void *swig_v)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  struct swigargs {
    std::vector< std::string > *arg1;
    intgo arg2;
    _gostring_ arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< std::string > **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  std::vector< std::string >::value_type arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
  
}


void
_wrap_delete_StringVector(void *swig_v)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  struct swigargs {
    std::vector< std::string > *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< std::string > **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_BSONArrayObj__SWIG_0(void *swig_v)
{
  BSONArrayObj *result = 0 ;
  
  struct swigargs {
    long : 0;
    BSONArrayObj *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (BSONArrayObj *)new BSONArrayObj();
  *(BSONArrayObj **)&swig_a->result = result; 
}


void
_wrap_delete_BSONArrayObj(void *swig_v)
{
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  
  struct swigargs {
    BSONArrayObj *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONArrayObj **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_BSONArrayObj__SWIG_1(void *swig_v)
{
  BSONArrayObj *arg1 = 0 ;
  BSONArrayObj *result = 0 ;
  
  struct swigargs {
    BSONArrayObj *arg1;
    long : 0;
    BSONArrayObj *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONArrayObj **)&swig_a->arg1; 
  
  result = (BSONArrayObj *)new BSONArrayObj((BSONArrayObj const &)*arg1);
  *(BSONArrayObj **)&swig_a->result = result; 
}


void
_wrap_BSONArrayObj_length(void *swig_v)
{
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  __int32 result;
  
  struct swigargs {
    BSONArrayObj *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONArrayObj **)&swig_a->arg1; 
  
  result = ((BSONArrayObj const *)arg1)->length();
  swig_a->result = result; 
}


void
_wrap_BSONArrayObj_add(void *swig_v)
{
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  BSONObj *arg2 = 0 ;
  
  struct swigargs {
    BSONArrayObj *arg1;
    BSONObj *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONArrayObj **)&swig_a->arg1; 
  arg2 = *(BSONObj **)&swig_a->arg2; 
  
  (arg1)->add((BSONObj const &)*arg2);
  
}


void
_wrap_BSONArrayObj_addAll(void *swig_v)
{
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  BSONArrayObj *arg2 = 0 ;
  
  struct swigargs {
    BSONArrayObj *arg1;
    BSONArrayObj *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONArrayObj **)&swig_a->arg1; 
  arg2 = *(BSONArrayObj **)&swig_a->arg2; 
  
  (arg1)->addAll((BSONArrayObj const &)*arg2);
  
}


void
_wrap_BSONArrayObj_get(void *swig_v)
{
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  __int32 arg2 ;
  BSONObj *result = 0 ;
  
  struct swigargs {
    BSONArrayObj *arg1;
    intgo arg2;
    long : 0;
    BSONObj *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONArrayObj **)&swig_a->arg1; 
  arg2 = (__int32)swig_a->arg2; 
  
  result = (BSONObj *)((BSONArrayObj const *)arg1)->get(arg2);
  *(BSONObj **)&swig_a->result = result; 
}


void
_wrap_BSONArrayObj_toChar(void *swig_v)
{
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    BSONArrayObj *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONArrayObj **)&swig_a->arg1; 
  
  result = (char *)((BSONArrayObj const *)arg1)->toChar();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_BSONArrayObj_Xselect(void *swig_v)
{
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  char *arg2 = (char *) 0 ;
  BSONArrayObj *result = 0 ;
  
  struct swigargs {
    BSONArrayObj *arg1;
    _gostring_ arg2;
    long : 0;
    BSONArrayObj *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONArrayObj **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  result = (BSONArrayObj *)((BSONArrayObj const *)arg1)->select((char const *)arg2);
  *(BSONArrayObj **)&swig_a->result = result; 
}


void
_wrap_BSONArrayObj_begin__SWIG_0(void *swig_v)
{
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  SwigValueWrapper< std::vector< BSONObj * >::iterator > result;
  
  struct swigargs {
    BSONArrayObj *arg1;
    long : 0;
    std::vector< BSONObj * >::iterator *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONArrayObj **)&swig_a->arg1; 
  
  result = (arg1)->begin();
  *(BSONArrayObj::iterator **)&swig_a->result = new BSONArrayObj::iterator(result); 
}


void
_wrap_BSONArrayObj_end__SWIG_0(void *swig_v)
{
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  SwigValueWrapper< std::vector< BSONObj * >::iterator > result;
  
  struct swigargs {
    BSONArrayObj *arg1;
    long : 0;
    std::vector< BSONObj * >::iterator *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONArrayObj **)&swig_a->arg1; 
  
  result = (arg1)->end();
  *(BSONArrayObj::iterator **)&swig_a->result = new BSONArrayObj::iterator(result); 
}


void
_wrap_BSONArrayObj_begin__SWIG_1(void *swig_v)
{
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  SwigValueWrapper< std::vector< BSONObj * >::const_iterator > result;
  
  struct swigargs {
    BSONArrayObj *arg1;
    long : 0;
    std::vector< BSONObj * >::const_iterator *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONArrayObj **)&swig_a->arg1; 
  
  result = ((BSONArrayObj const *)arg1)->begin();
  *(BSONArrayObj::const_iterator **)&swig_a->result = new BSONArrayObj::const_iterator(result); 
}


void
_wrap_BSONArrayObj_end__SWIG_1(void *swig_v)
{
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  SwigValueWrapper< std::vector< BSONObj * >::const_iterator > result;
  
  struct swigargs {
    BSONArrayObj *arg1;
    long : 0;
    std::vector< BSONObj * >::const_iterator *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONArrayObj **)&swig_a->arg1; 
  
  result = ((BSONArrayObj const *)arg1)->end();
  *(BSONArrayObj::const_iterator **)&swig_a->result = new BSONArrayObj::const_iterator(result); 
}


void
_wrap_new_BSONObj__SWIG_0(void *swig_v)
{
  BSONObj *result = 0 ;
  
  struct swigargs {
    long : 0;
    BSONObj *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (BSONObj *)new BSONObj();
  *(BSONObj **)&swig_a->result = result; 
}


void
_wrap_new_BSONObj__SWIG_1(void *swig_v)
{
  BSONObj *arg1 = 0 ;
  BSONObj *result = 0 ;
  
  struct swigargs {
    BSONObj *arg1;
    long : 0;
    BSONObj *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  
  result = (BSONObj *)new BSONObj((BSONObj const &)*arg1);
  *(BSONObj **)&swig_a->result = result; 
}


void
_wrap_delete_BSONObj(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  
  struct swigargs {
    BSONObj *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_BSONObj_add__SWIG_0(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  __int32 arg3 ;
  
  struct swigargs {
    BSONObj *arg1;
    _gostring_ arg2;
    intgo arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  arg3 = (__int32)swig_a->arg3; 
  
  (arg1)->add(arg2,arg3);
  
}


void
_wrap_BSONObj_add__SWIG_1(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  double arg3 ;
  
  struct swigargs {
    BSONObj *arg1;
    _gostring_ arg2;
    double arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  arg3 = (double)swig_a->arg3; 
  
  (arg1)->add(arg2,arg3);
  
}


void
_wrap_BSONObj_add__SWIG_2(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  __int64 arg3 ;
  
  struct swigargs {
    BSONObj *arg1;
    _gostring_ arg2;
    long long arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  arg3 = (__int64)swig_a->arg3; 
  
  (arg1)->add(arg2,arg3);
  
}


void
_wrap_BSONObj_add__SWIG_3(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  char *arg3 = (char *) 0 ;
  
  struct swigargs {
    BSONObj *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  arg3 = (char *)swig_a->arg3.p; 
  
  (arg1)->add(arg2,(char const *)arg3);
  
}


void
_wrap_BSONObj_add__SWIG_4(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  char *arg3 = (char *) 0 ;
  __int32 arg4 ;
  
  struct swigargs {
    BSONObj *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  arg3 = (char *)swig_a->arg3.p; 
  arg4 = (__int32)swig_a->arg4; 
  
  (arg1)->add(arg2,(char const *)arg3,arg4);
  
}


void
_wrap_BSONObj_add__SWIG_5(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONObj *arg3 = 0 ;
  
  struct swigargs {
    BSONObj *arg1;
    _gostring_ arg2;
    BSONObj *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  arg3 = *(BSONObj **)&swig_a->arg3; 
  
  (arg1)->add(arg2,(BSONObj const &)*arg3);
  
}


void
_wrap_BSONObj_add__SWIG_6(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONArrayObj *arg3 = 0 ;
  
  struct swigargs {
    BSONObj *arg1;
    _gostring_ arg2;
    BSONArrayObj *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  arg3 = *(BSONArrayObj **)&swig_a->arg3; 
  
  (arg1)->add(arg2,(BSONArrayObj const &)*arg3);
  
}


void
_wrap_BSONObj_add__SWIG_7(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONContent *arg3 = 0 ;
  
  struct swigargs {
    BSONObj *arg1;
    _gostring_ arg2;
    BSONContent *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  arg3 = *(BSONContent **)&swig_a->arg3; 
  
  (arg1)->add(arg2,(BSONContent const &)*arg3);
  
}


void
_wrap_BSONObj_add__SWIG_8(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  
  struct swigargs {
    BSONObj *arg1;
    _gostring_ arg2;
    bool arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  arg3 = (bool)swig_a->arg3; 
  
  (arg1)->add(arg2,arg3);
  
}


void
_wrap_BSONObj_has(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  bool result;
  
  struct swigargs {
    BSONObj *arg1;
    _gostring_ arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  result = (bool)((BSONObj const *)arg1)->has(arg2);
  swig_a->result = result; 
}


void
_wrap_BSONObj_getBoolean(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  bool result;
  
  struct swigargs {
    BSONObj *arg1;
    _gostring_ arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  try {
    result = (bool)((BSONObj const *)arg1)->getBoolean(arg2);
  }
  catch(BSONException &_e) {
    (void)_e;
    _swig_gopanic("C++ BSONException exception thrown");
    
  }
  
  swig_a->result = result; 
}


void
_wrap_BSONObj_getInt(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  __int32 result;
  
  struct swigargs {
    BSONObj *arg1;
    _gostring_ arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  try {
    result = ((BSONObj const *)arg1)->getInt(arg2);
  }
  catch(BSONException &_e) {
    (void)_e;
    _swig_gopanic("C++ BSONException exception thrown");
    
  }
  
  swig_a->result = result; 
}


void
_wrap_BSONObj_getDouble(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  double result;
  
  struct swigargs {
    BSONObj *arg1;
    _gostring_ arg2;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  try {
    result = (double)((BSONObj const *)arg1)->getDouble(arg2);
  }
  catch(BSONException &_e) {
    (void)_e;
    _swig_gopanic("C++ BSONException exception thrown");
    
  }
  
  swig_a->result = result; 
}


void
_wrap_BSONObj_getLong(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  __int64 result;
  
  struct swigargs {
    BSONObj *arg1;
    _gostring_ arg2;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  try {
    result = ((BSONObj const *)arg1)->getLong(arg2);
  }
  catch(BSONException &_e) {
    (void)_e;
    _swig_gopanic("C++ BSONException exception thrown");
    
  }
  
  swig_a->result = result; 
}


void
_wrap_BSONObj_getString(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  std::string result;
  
  struct swigargs {
    BSONObj *arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  try {
    result = ((BSONObj const *)arg1)->getString(arg2);
  }
  catch(BSONException &_e) {
    (void)_e;
    _swig_gopanic("C++ BSONException exception thrown");
    
  }
  
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_BSONObj_getBSON(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONObj *result = 0 ;
  
  struct swigargs {
    BSONObj *arg1;
    _gostring_ arg2;
    long : 0;
    BSONObj *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  try {
    result = (BSONObj *)((BSONObj const *)arg1)->getBSON(arg2);
  }
  catch(BSONException &_e) {
    (void)_e;
    _swig_gopanic("C++ BSONException exception thrown");
    
  }
  
  *(BSONObj **)&swig_a->result = result; 
}


void
_wrap_BSONObj_getBSONArray(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONArrayObj *result = 0 ;
  
  struct swigargs {
    BSONObj *arg1;
    _gostring_ arg2;
    long : 0;
    BSONArrayObj *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  try {
    result = (BSONArrayObj *)((BSONObj const *)arg1)->getBSONArray(arg2);
  }
  catch(BSONException &_e) {
    (void)_e;
    _swig_gopanic("C++ BSONException exception thrown");
    
  }
  
  *(BSONArrayObj **)&swig_a->result = result; 
}


void
_wrap_BSONObj_get(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONContent *result = 0 ;
  
  struct swigargs {
    BSONObj *arg1;
    _gostring_ arg2;
    long : 0;
    BSONContent *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  try {
    result = (BSONContent *)((BSONObj const *)arg1)->get(arg2);
  }
  catch(BSONException &_e) {
    (void)_e;
    _swig_gopanic("C++ BSONException exception thrown");
    
  }
  
  *(BSONContent **)&swig_a->result = result; 
}


void
_wrap_BSONObj_getContent__SWIG_0(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONContent *result = 0 ;
  
  struct swigargs {
    BSONObj *arg1;
    _gostring_ arg2;
    long : 0;
    BSONContent *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  result = (BSONContent *)((BSONObj const *)arg1)->getContent(arg2);
  *(BSONContent **)&swig_a->result = result; 
}


void
_wrap_BSONObj_getContent__SWIG_1(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONTYPE arg3 ;
  BSONTYPE *argp3 ;
  BSONContent *result = 0 ;
  
  struct swigargs {
    BSONObj *arg1;
    _gostring_ arg2;
    BSONTYPE *arg3;
    long : 0;
    BSONContent *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  argp3 = (BSONTYPE *)swig_a->arg3;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null BSONTYPE");
  }
  arg3 = (BSONTYPE)*argp3;
  
  
  result = (BSONContent *)((BSONObj const *)arg1)->getContent(arg2,arg3);
  *(BSONContent **)&swig_a->result = result; 
}


void
_wrap_BSONObj_getXpath(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string *arg2 = 0 ;
  BSONContent *result = 0 ;
  
  struct swigargs {
    BSONObj *arg1;
    _gostring_ arg2;
    long : 0;
    BSONContent *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (BSONContent *)((BSONObj const *)arg1)->getXpath((std::string const &)*arg2);
  *(BSONContent **)&swig_a->result = result; 
}


void
_wrap_BSONObj_Xselect(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  char *arg2 = (char *) 0 ;
  BSONObj *result = 0 ;
  
  struct swigargs {
    BSONObj *arg1;
    _gostring_ arg2;
    long : 0;
    BSONObj *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  result = (BSONObj *)((BSONObj const *)arg1)->select((char const *)arg2);
  *(BSONObj **)&swig_a->result = result; 
}


void
_wrap_BSONObj_Xtype(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONTYPE result;
  
  struct swigargs {
    BSONObj *arg1;
    _gostring_ arg2;
    long : 0;
    BSONTYPE *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  result = ((BSONObj const *)arg1)->type(arg2);
  *(BSONTYPE **)&swig_a->result = new BSONTYPE(result); 
}


void
_wrap_BSONObj_toChar(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    BSONObj *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  
  result = (char *)(arg1)->toChar();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_BSONObj_begin(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  BSONObj::const_iterator result;
  
  struct swigargs {
    BSONObj *arg1;
    long : 0;
    std::map< std::string,BSONContent * >::const_iterator *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  
  result = ((BSONObj const *)arg1)->begin();
  *(BSONObj::const_iterator **)&swig_a->result = new BSONObj::const_iterator(result); 
}


void
_wrap_BSONObj_end(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  BSONObj::const_iterator result;
  
  struct swigargs {
    BSONObj *arg1;
    long : 0;
    std::map< std::string,BSONContent * >::const_iterator *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  
  result = ((BSONObj const *)arg1)->end();
  *(BSONObj::const_iterator **)&swig_a->result = new BSONObj::const_iterator(result); 
}


void
_wrap_BSONObj_length(void *swig_v)
{
  BSONObj *arg1 = (BSONObj *) 0 ;
  __int32 result;
  
  struct swigargs {
    BSONObj *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONObj **)&swig_a->arg1; 
  
  result = ((BSONObj const *)arg1)->length();
  swig_a->result = result; 
}


void
_wrap_new_BSONParser(void *swig_v)
{
  BSONParser *result = 0 ;
  
  struct swigargs {
    long : 0;
    BSONParser *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (BSONParser *)new BSONParser();
  *(BSONParser **)&swig_a->result = result; 
}


void
_wrap_delete_BSONParser(void *swig_v)
{
  BSONParser *arg1 = (BSONParser *) 0 ;
  
  struct swigargs {
    BSONParser *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(BSONParser **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_BSONParser_parse(void *swig_v)
{
  std::string *arg1 = 0 ;
  BSONObj *result = 0 ;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    BSONObj *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (BSONObj *)BSONParser::parse((std::string const &)*arg1);
  *(BSONObj **)&swig_a->result = result; 
}


void
_wrap_BSONParser_parseArray(void *swig_v)
{
  std::string *arg1 = 0 ;
  BSONArrayObj *result = 0 ;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    BSONArrayObj *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (BSONArrayObj *)BSONParser::parseArray((std::string const &)*arg1);
  *(BSONArrayObj **)&swig_a->result = result; 
}


void
_wrap_FO_NONE(void *swig_v)
{
  FILTER_OPERATORS result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = FO_NONE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_FO_TOKEN(void *swig_v)
{
  FILTER_OPERATORS result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = FO_TOKEN;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_FO_AND(void *swig_v)
{
  FILTER_OPERATORS result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = FO_AND;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_FO_OR(void *swig_v)
{
  FILTER_OPERATORS result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = FO_OR;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_FO_EQUALS(void *swig_v)
{
  FILTER_OPERATORS result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = FO_EQUALS;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_FO_NOT_EQUALS(void *swig_v)
{
  FILTER_OPERATORS result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = FO_NOT_EQUALS;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_FO_PARENTESIS_OPEN(void *swig_v)
{
  FILTER_OPERATORS result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = FO_PARENTESIS_OPEN;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_FO_PARENTESIS_CLOSE(void *swig_v)
{
  FILTER_OPERATORS result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = FO_PARENTESIS_CLOSE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_FO_NOT(void *swig_v)
{
  FILTER_OPERATORS result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = FO_NOT;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_FO_LESSTHAN(void *swig_v)
{
  FILTER_OPERATORS result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = FO_LESSTHAN;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_FO_LESSEQUALTHAN(void *swig_v)
{
  FILTER_OPERATORS result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = FO_LESSEQUALTHAN;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_FO_GREATERTHAN(void *swig_v)
{
  FILTER_OPERATORS result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = FO_GREATERTHAN;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_FO_GREATEREQUALTHAN(void *swig_v)
{
  FILTER_OPERATORS result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = FO_GREATEREQUALTHAN;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_FO_EXISTS(void *swig_v)
{
  FILTER_OPERATORS result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = FO_EXISTS;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_ET_CONSTANT(void *swig_v)
{
  EXPRESSION_TYPE result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = ET_CONSTANT;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_ET_SIMPLE(void *swig_v)
{
  EXPRESSION_TYPE result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = ET_SIMPLE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_ET_BINARY(void *swig_v)
{
  EXPRESSION_TYPE result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = ET_BINARY;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_ET_UNARY(void *swig_v)
{
  EXPRESSION_TYPE result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = ET_UNARY;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_parseFilterOperator(void *swig_v)
{
  char *arg1 = (char *) 0 ;
  FILTER_OPERATORS result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (char *)swig_a->arg1.p; 
  
  result = (FILTER_OPERATORS)parseFilterOperator((char const *)arg1);
  swig_a->result = (intgo)result; 
}


void
_wrap_new_ParseException__SWIG_0(void *swig_v)
{
  int arg1 ;
  char *arg2 = (char *) 0 ;
  ParseException *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    _gostring_ arg2;
    long : 0;
    ParseException *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  result = (ParseException *)new ParseException(arg1,(char const *)arg2);
  *(ParseException **)&swig_a->result = result; 
}


void
_wrap_new_ParseException__SWIG_1(void *swig_v)
{
  ParseException *arg1 = 0 ;
  ParseException *result = 0 ;
  
  struct swigargs {
    ParseException *arg1;
    long : 0;
    ParseException *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(ParseException **)&swig_a->arg1; 
  
  result = (ParseException *)new ParseException((ParseException const &)*arg1);
  *(ParseException **)&swig_a->result = result; 
}


void
_wrap_ParseException_what(void *swig_v)
{
  ParseException *arg1 = (ParseException *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    ParseException *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(ParseException **)&swig_a->arg1; 
  
  result = (char *)((ParseException const *)arg1)->what();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_ParseException_errorCode(void *swig_v)
{
  ParseException *arg1 = (ParseException *) 0 ;
  int result;
  
  struct swigargs {
    ParseException *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(ParseException **)&swig_a->arg1; 
  
  result = (int)((ParseException const *)arg1)->errorCode();
  swig_a->result = result; 
}


void
_wrap_delete_ParseException(void *swig_v)
{
  ParseException *arg1 = (ParseException *) 0 ;
  
  struct swigargs {
    ParseException *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(ParseException **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_bson_splitSelect(void *swig_v)
{
  char *arg1 = (char *) 0 ;
  SwigValueWrapper< std::set< std::string > > result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    std::set< std::string > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (char *)swig_a->arg1.p; 
  
  result = bson_splitSelect((char const *)arg1);
  *(std::set< std::string > **)&swig_a->result = new std::set< std::string >(result); 
}


void
_wrap_bson_subselect(void *swig_v)
{
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (char *)swig_a->arg1.p; 
  arg2 = (char *)swig_a->arg2.p; 
  
  result = (char *)bson_subselect((char const *)arg1,(char const *)arg2);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_convert(void *swig_v)
{
  BSONTYPE arg1 ;
  BSONTYPE arg2 ;
  void *arg3 = (void *) 0 ;
  BSONTYPE *argp1 ;
  BSONTYPE *argp2 ;
  void *result = 0 ;
  
  struct swigargs {
    BSONTYPE *arg1;
    BSONTYPE *arg2;
    void *arg3;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  argp1 = (BSONTYPE *)swig_a->arg1;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null BSONTYPE");
  }
  arg1 = (BSONTYPE)*argp1;
  
  
  argp2 = (BSONTYPE *)swig_a->arg2;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BSONTYPE");
  }
  arg2 = (BSONTYPE)*argp2;
  
  arg3 = *(void **)&swig_a->arg3; 
  
  result = (void *)convert(arg1,arg2,arg3);
  *(void **)&swig_a->result = result; 
}


void
_wrap_new_DjondbConnection__SWIG_0(void *swig_v)
{
  std::string arg1 ;
  djondb::DjondbConnection *result = 0 ;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    djondb::DjondbConnection *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  
  result = (djondb::DjondbConnection *)new djondb::DjondbConnection(arg1);
  *(djondb::DjondbConnection **)&swig_a->result = result; 
}


void
_wrap_new_DjondbConnection__SWIG_1(void *swig_v)
{
  std::string arg1 ;
  int arg2 ;
  djondb::DjondbConnection *result = 0 ;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    djondb::DjondbConnection *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  arg2 = (int)swig_a->arg2; 
  
  result = (djondb::DjondbConnection *)new djondb::DjondbConnection(arg1,arg2);
  *(djondb::DjondbConnection **)&swig_a->result = result; 
}


void
_wrap_new_DjondbConnection__SWIG_2(void *swig_v)
{
  djondb::DjondbConnection *arg1 = 0 ;
  djondb::DjondbConnection *result = 0 ;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
    long : 0;
    djondb::DjondbConnection *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  result = (djondb::DjondbConnection *)new djondb::DjondbConnection((djondb::DjondbConnection const &)*arg1);
  *(djondb::DjondbConnection **)&swig_a->result = result; 
}


void
_wrap_delete_DjondbConnection(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_DjondbConnection_beginTransaction(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  result = (char *)(arg1)->beginTransaction();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_DjondbConnection_commitTransaction(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  (arg1)->commitTransaction();
  
}


void
_wrap_DjondbConnection_rollbackTransaction(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  (arg1)->rollbackTransaction();
  
}


void
_wrap_DjondbConnection_open(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  bool result;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  result = (bool)(arg1)->open();
  swig_a->result = result; 
}


void
_wrap_DjondbConnection_close(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  (arg1)->close();
  
}


void
_wrap_DjondbConnection_internalClose(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  (arg1)->internalClose();
  
}


void
_wrap_DjondbConnection_isOpen(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  bool result;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  result = (bool)((djondb::DjondbConnection const *)arg1)->isOpen();
  swig_a->result = result; 
}


void
_wrap_DjondbConnection_shutdown(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  bool result;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  result = (bool)((djondb::DjondbConnection const *)arg1)->shutdown();
  swig_a->result = result; 
}


void
_wrap_DjondbConnection_insert__SWIG_0(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (bool)(arg1)->insert((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_DjondbConnection_insert__SWIG_1(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  BSONObj *arg4 = 0 ;
  bool result;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    BSONObj *arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  arg4 = *(BSONObj **)&swig_a->arg4; 
  
  result = (bool)(arg1)->insert((std::string const &)*arg2,(std::string const &)*arg3,(BSONObj const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_DjondbConnection_findByKey__SWIG_0(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  BSONObj *result = 0 ;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    BSONObj *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  result = (BSONObj *)(arg1)->findByKey((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  *(BSONObj **)&swig_a->result = result; 
}


void
_wrap_DjondbConnection_findByKey__SWIG_1(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  BSONObj *result = 0 ;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    BSONObj *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (BSONObj *)(arg1)->findByKey((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  *(BSONObj **)&swig_a->result = result; 
}


void
_wrap_DjondbConnection_find__SWIG_0(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    djondb::DjondbCursor *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (djondb::DjondbCursor *)(arg1)->find((std::string const &)*arg2,(std::string const &)*arg3);
  *(djondb::DjondbCursor **)&swig_a->result = result; 
}


void
_wrap_DjondbConnection_find__SWIG_1(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  BSONObj *arg4 = 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    BSONObj *arg4;
    long : 0;
    djondb::DjondbCursor *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  arg4 = *(BSONObj **)&swig_a->arg4; 
  
  result = (djondb::DjondbCursor *)(arg1)->find((std::string const &)*arg2,(std::string const &)*arg3,(BSONObj const &)*arg4);
  *(djondb::DjondbCursor **)&swig_a->result = result; 
}


void
_wrap_DjondbConnection_find__SWIG_2(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    djondb::DjondbCursor *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (djondb::DjondbCursor *)(arg1)->find((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  *(djondb::DjondbCursor **)&swig_a->result = result; 
}


void
_wrap_DjondbConnection_find__SWIG_3(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  BSONObj *arg5 = 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    BSONObj *arg5;
    long : 0;
    djondb::DjondbCursor *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  arg5 = *(BSONObj **)&swig_a->arg5; 
  
  result = (djondb::DjondbCursor *)(arg1)->find((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(BSONObj const &)*arg5);
  *(djondb::DjondbCursor **)&swig_a->result = result; 
}


void
_wrap_DjondbConnection_find__SWIG_4(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    djondb::DjondbCursor *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  result = (djondb::DjondbCursor *)(arg1)->find((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  *(djondb::DjondbCursor **)&swig_a->result = result; 
}


void
_wrap_DjondbConnection_find__SWIG_5(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  BSONObj *arg6 = 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    BSONObj *arg6;
    long : 0;
    djondb::DjondbCursor *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  arg6 = *(BSONObj **)&swig_a->arg6; 
  
  result = (djondb::DjondbCursor *)(arg1)->find((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(BSONObj const &)*arg6);
  *(djondb::DjondbCursor **)&swig_a->result = result; 
}


void
_wrap_DjondbConnection_update__SWIG_0(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (bool)(arg1)->update((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_DjondbConnection_update__SWIG_1(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  BSONObj *arg4 = 0 ;
  bool result;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    BSONObj *arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  arg4 = *(BSONObj **)&swig_a->arg4; 
  
  result = (bool)(arg1)->update((std::string const &)*arg2,(std::string const &)*arg3,(BSONObj const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_DjondbConnection_remove(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  bool result;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  result = (bool)(arg1)->remove((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  swig_a->result = result; 
}


void
_wrap_DjondbConnection_executeQuery(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  BSONArrayObj *result = 0 ;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
    _gostring_ arg2;
    long : 0;
    BSONArrayObj *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (BSONArrayObj *)(arg1)->executeQuery((std::string const &)*arg2);
  *(BSONArrayObj **)&swig_a->result = result; 
}


void
_wrap_DjondbConnection_executeUpdate(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
    _gostring_ arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (bool)(arg1)->executeUpdate((std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_DjondbConnection_dropNamespace(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (bool)(arg1)->dropNamespace((std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_DjondbConnection_dbs(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
    long : 0;
    std::vector< std::string > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  result = (std::vector< std::string > *)((djondb::DjondbConnection const *)arg1)->dbs();
  *(std::vector< std::string > **)&swig_a->result = result; 
}


void
_wrap_DjondbConnection_namespaces(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
    _gostring_ arg2;
    long : 0;
    std::vector< std::string > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (std::vector< std::string > *)((djondb::DjondbConnection const *)arg1)->namespaces((std::string const &)*arg2);
  *(std::vector< std::string > **)&swig_a->result = result; 
}


void
_wrap_DjondbConnection_host(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::string result;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  result = ((djondb::DjondbConnection const *)arg1)->host();
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_new_DjondbCursor__SWIG_0(void *swig_v)
{
  NetworkOutputStream *arg1 = (NetworkOutputStream *) 0 ;
  NetworkInputStream *arg2 = (NetworkInputStream *) 0 ;
  CommandWriter *arg3 = (CommandWriter *) 0 ;
  char *arg4 = (char *) 0 ;
  BSONArrayObj *arg5 = (BSONArrayObj *) 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  struct swigargs {
    NetworkOutputStream *arg1;
    NetworkInputStream *arg2;
    CommandWriter *arg3;
    _gostring_ arg4;
    BSONArrayObj *arg5;
    long : 0;
    djondb::DjondbCursor *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(NetworkOutputStream **)&swig_a->arg1; 
  arg2 = *(NetworkInputStream **)&swig_a->arg2; 
  arg3 = *(CommandWriter **)&swig_a->arg3; 
  arg4 = (char *)swig_a->arg4.p; 
  arg5 = *(BSONArrayObj **)&swig_a->arg5; 
  
  result = (djondb::DjondbCursor *)new djondb::DjondbCursor(arg1,arg2,arg3,(char const *)arg4,arg5);
  *(djondb::DjondbCursor **)&swig_a->result = result; 
}


void
_wrap_new_DjondbCursor__SWIG_1(void *swig_v)
{
  djondb::DjondbCursor *arg1 = 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  struct swigargs {
    djondb::DjondbCursor *arg1;
    long : 0;
    djondb::DjondbCursor *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbCursor **)&swig_a->arg1; 
  
  result = (djondb::DjondbCursor *)new djondb::DjondbCursor((djondb::DjondbCursor const &)*arg1);
  *(djondb::DjondbCursor **)&swig_a->result = result; 
}


void
_wrap_delete_DjondbCursor(void *swig_v)
{
  djondb::DjondbCursor *arg1 = (djondb::DjondbCursor *) 0 ;
  
  struct swigargs {
    djondb::DjondbCursor *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbCursor **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_DjondbCursor_next(void *swig_v)
{
  djondb::DjondbCursor *arg1 = (djondb::DjondbCursor *) 0 ;
  bool result;
  
  struct swigargs {
    djondb::DjondbCursor *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbCursor **)&swig_a->arg1; 
  
  result = (bool)(arg1)->next();
  swig_a->result = result; 
}


void
_wrap_DjondbCursor_previous(void *swig_v)
{
  djondb::DjondbCursor *arg1 = (djondb::DjondbCursor *) 0 ;
  bool result;
  
  struct swigargs {
    djondb::DjondbCursor *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbCursor **)&swig_a->arg1; 
  
  result = (bool)(arg1)->previous();
  swig_a->result = result; 
}


void
_wrap_DjondbCursor_current(void *swig_v)
{
  djondb::DjondbCursor *arg1 = (djondb::DjondbCursor *) 0 ;
  BSONObj *result = 0 ;
  
  struct swigargs {
    djondb::DjondbCursor *arg1;
    long : 0;
    BSONObj *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbCursor **)&swig_a->arg1; 
  
  result = (BSONObj *)(arg1)->current();
  *(BSONObj **)&swig_a->result = result; 
}


void
_wrap_DjondbCursor_length(void *swig_v)
{
  djondb::DjondbCursor *arg1 = (djondb::DjondbCursor *) 0 ;
  __int32 result;
  
  struct swigargs {
    djondb::DjondbCursor *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbCursor **)&swig_a->arg1; 
  
  result = (arg1)->length();
  swig_a->result = result; 
}


void
_wrap_DjondbCursor_releaseCursor(void *swig_v)
{
  djondb::DjondbCursor *arg1 = (djondb::DjondbCursor *) 0 ;
  
  struct swigargs {
    djondb::DjondbCursor *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbCursor **)&swig_a->arg1; 
  
  (arg1)->releaseCursor();
  
}


void
_wrap_DjondbCursor_seek(void *swig_v)
{
  djondb::DjondbCursor *arg1 = (djondb::DjondbCursor *) 0 ;
  __int32 arg2 ;
  
  struct swigargs {
    djondb::DjondbCursor *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbCursor **)&swig_a->arg1; 
  arg2 = (__int32)swig_a->arg2; 
  
  (arg1)->seek(arg2);
  
}


void
_wrap_ConnectionReference__connection_set(void *swig_v)
{
  djondb::ConnectionReference *arg1 = (djondb::ConnectionReference *) 0 ;
  djondb::DjondbConnection *arg2 = (djondb::DjondbConnection *) 0 ;
  
  struct swigargs {
    djondb::ConnectionReference *arg1;
    djondb::DjondbConnection *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::ConnectionReference **)&swig_a->arg1; 
  arg2 = *(djondb::DjondbConnection **)&swig_a->arg2; 
  
  if (arg1) (arg1)->_connection = arg2;
  
}


void
_wrap_ConnectionReference__connection_get(void *swig_v)
{
  djondb::ConnectionReference *arg1 = (djondb::ConnectionReference *) 0 ;
  djondb::DjondbConnection *result = 0 ;
  
  struct swigargs {
    djondb::ConnectionReference *arg1;
    long : 0;
    djondb::DjondbConnection *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::ConnectionReference **)&swig_a->arg1; 
  
  result = (djondb::DjondbConnection *) ((arg1)->_connection);
  *(djondb::DjondbConnection **)&swig_a->result = result; 
}


void
_wrap_ConnectionReference__references_set(void *swig_v)
{
  djondb::ConnectionReference *arg1 = (djondb::ConnectionReference *) 0 ;
  int arg2 ;
  
  struct swigargs {
    djondb::ConnectionReference *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::ConnectionReference **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->_references = arg2;
  
}


void
_wrap_ConnectionReference__references_get(void *swig_v)
{
  djondb::ConnectionReference *arg1 = (djondb::ConnectionReference *) 0 ;
  int result;
  
  struct swigargs {
    djondb::ConnectionReference *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::ConnectionReference **)&swig_a->arg1; 
  
  result = (int) ((arg1)->_references);
  swig_a->result = result; 
}


void
_wrap_new_ConnectionReference(void *swig_v)
{
  djondb::ConnectionReference *result = 0 ;
  
  struct swigargs {
    long : 0;
    djondb::ConnectionReference *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (djondb::ConnectionReference *)new djondb::ConnectionReference();
  *(djondb::ConnectionReference **)&swig_a->result = result; 
}


void
_wrap_delete_ConnectionReference(void *swig_v)
{
  djondb::ConnectionReference *arg1 = (djondb::ConnectionReference *) 0 ;
  
  struct swigargs {
    djondb::ConnectionReference *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::ConnectionReference **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_DjondbConnectionManager(void *swig_v)
{
  djondb::DjondbConnectionManager *result = 0 ;
  
  struct swigargs {
    long : 0;
    djondb::DjondbConnectionManager *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (djondb::DjondbConnectionManager *)new djondb::DjondbConnectionManager();
  *(djondb::DjondbConnectionManager **)&swig_a->result = result; 
}


void
_wrap_delete_DjondbConnectionManager(void *swig_v)
{
  djondb::DjondbConnectionManager *arg1 = (djondb::DjondbConnectionManager *) 0 ;
  
  struct swigargs {
    djondb::DjondbConnectionManager *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnectionManager **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_DjondbConnectionManager_getConnection__SWIG_0(void *swig_v)
{
  std::string arg1 ;
  djondb::DjondbConnection *result = 0 ;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    djondb::DjondbConnection *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  
  result = (djondb::DjondbConnection *)djondb::DjondbConnectionManager::getConnection(arg1);
  *(djondb::DjondbConnection **)&swig_a->result = result; 
}


void
_wrap_DjondbConnectionManager_getConnection__SWIG_1(void *swig_v)
{
  std::string arg1 ;
  int arg2 ;
  djondb::DjondbConnection *result = 0 ;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    djondb::DjondbConnection *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  arg2 = (int)swig_a->arg2; 
  
  result = (djondb::DjondbConnection *)djondb::DjondbConnectionManager::getConnection(arg1,arg2);
  *(djondb::DjondbConnection **)&swig_a->result = result; 
}


void
_wrap_DjondbConnectionManager_releaseConnection(void *swig_v)
{
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  
  struct swigargs {
    djondb::DjondbConnection *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(djondb::DjondbConnection **)&swig_a->arg1; 
  
  djondb::DjondbConnectionManager::releaseConnection(arg1);
  
}


#ifdef __cplusplus
}
#endif

