/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

package djondb



import _ "runtime/cgo"
import "unsafe"

type _ unsafe.Pointer



type _swig_fnptr *byte
type _swig_memberptr *byte

//extern djondbSwigCgocall
func SwigCgocall()
//extern djondbSwigCgocallDone
func SwigCgocallDone()
//extern djondbSwigCgocallBack
func SwigCgocallBack()
//extern djondbSwigCgocallBackDone
func SwigCgocallBackDone()

type SwigcptrBSONObjVectorPtr uintptr

func (p SwigcptrBSONObjVectorPtr) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrBSONObjVectorPtr) SwigIsBSONObjVectorPtr() {
}

func _swig_wrap_new_BSONObjVectorPtr__SWIG_0() SwigcptrBSONObjVectorPtr

func NewBSONObjVectorPtr__SWIG_0() BSONObjVectorPtr {
	return _swig_wrap_new_BSONObjVectorPtr__SWIG_0()
}

func _swig_wrap_new_BSONObjVectorPtr__SWIG_1(int) SwigcptrBSONObjVectorPtr

func NewBSONObjVectorPtr__SWIG_1(arg1 int) BSONObjVectorPtr {
	return _swig_wrap_new_BSONObjVectorPtr__SWIG_1(arg1)
}

func NewBSONObjVectorPtr(a ...interface{}) BSONObjVectorPtr {
	argc := len(a)
	if argc == 0 {
		return NewBSONObjVectorPtr__SWIG_0()
	}
	if argc == 1 {
		return NewBSONObjVectorPtr__SWIG_1(a[0].(int))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_BSONObjVectorPtr_size(SwigcptrBSONObjVectorPtr) int

func (arg1 SwigcptrBSONObjVectorPtr) Size() int {
	return _swig_wrap_BSONObjVectorPtr_size(arg1)
}

func _swig_wrap_BSONObjVectorPtr_capacity(SwigcptrBSONObjVectorPtr) int

func (arg1 SwigcptrBSONObjVectorPtr) Capacity() int {
	return _swig_wrap_BSONObjVectorPtr_capacity(arg1)
}

func _swig_wrap_BSONObjVectorPtr_reserve(SwigcptrBSONObjVectorPtr, int)

func (arg1 SwigcptrBSONObjVectorPtr) Reserve(arg2 int) {
	_swig_wrap_BSONObjVectorPtr_reserve(arg1, arg2)
}

func _swig_wrap_BSONObjVectorPtr_isEmpty(SwigcptrBSONObjVectorPtr) bool

func (arg1 SwigcptrBSONObjVectorPtr) IsEmpty() bool {
	return _swig_wrap_BSONObjVectorPtr_isEmpty(arg1)
}

func _swig_wrap_BSONObjVectorPtr_clear(SwigcptrBSONObjVectorPtr)

func (arg1 SwigcptrBSONObjVectorPtr) Clear() {
	_swig_wrap_BSONObjVectorPtr_clear(arg1)
}

func _swig_wrap_BSONObjVectorPtr_add(SwigcptrBSONObjVectorPtr, uintptr)

func (arg1 SwigcptrBSONObjVectorPtr) Add(arg2 BSONObj) {
	_swig_wrap_BSONObjVectorPtr_add(arg1, arg2.Swigcptr())
}

func _swig_wrap_BSONObjVectorPtr_get(SwigcptrBSONObjVectorPtr, int) SwigcptrBSONObj

func (arg1 SwigcptrBSONObjVectorPtr) Get(arg2 int) BSONObj {
	return _swig_wrap_BSONObjVectorPtr_get(arg1, arg2)
}

func _swig_wrap_BSONObjVectorPtr_set(SwigcptrBSONObjVectorPtr, int, uintptr)

func (arg1 SwigcptrBSONObjVectorPtr) Set(arg2 int, arg3 BSONObj) {
	_swig_wrap_BSONObjVectorPtr_set(arg1, arg2, arg3.Swigcptr())
}

func _swig_wrap_delete_BSONObjVectorPtr(uintptr)

func DeleteBSONObjVectorPtr(arg1 BSONObjVectorPtr) {
	_swig_wrap_delete_BSONObjVectorPtr(arg1.Swigcptr())
}

type BSONObjVectorPtr interface {
	Swigcptr() uintptr
	SwigIsBSONObjVectorPtr()
	Size() int
	Capacity() int
	Reserve(arg2 int)
	IsEmpty() bool
	Clear()
	Add(arg2 BSONObj)
	Get(arg2 int) BSONObj
	Set(arg2 int, arg3 BSONObj)
}

type SwigcptrStringVector uintptr

func (p SwigcptrStringVector) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrStringVector) SwigIsStringVector() {
}

func _swig_wrap_new_StringVector__SWIG_0() SwigcptrStringVector

func NewStringVector__SWIG_0() StringVector {
	return _swig_wrap_new_StringVector__SWIG_0()
}

func _swig_wrap_new_StringVector__SWIG_1(int) SwigcptrStringVector

func NewStringVector__SWIG_1(arg1 int) StringVector {
	return _swig_wrap_new_StringVector__SWIG_1(arg1)
}

func NewStringVector(a ...interface{}) StringVector {
	argc := len(a)
	if argc == 0 {
		return NewStringVector__SWIG_0()
	}
	if argc == 1 {
		return NewStringVector__SWIG_1(a[0].(int))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_StringVector_size(SwigcptrStringVector) int

func (arg1 SwigcptrStringVector) Size() int {
	return _swig_wrap_StringVector_size(arg1)
}

func _swig_wrap_StringVector_capacity(SwigcptrStringVector) int

func (arg1 SwigcptrStringVector) Capacity() int {
	return _swig_wrap_StringVector_capacity(arg1)
}

func _swig_wrap_StringVector_reserve(SwigcptrStringVector, int)

func (arg1 SwigcptrStringVector) Reserve(arg2 int) {
	_swig_wrap_StringVector_reserve(arg1, arg2)
}

func _swig_wrap_StringVector_isEmpty(SwigcptrStringVector) bool

func (arg1 SwigcptrStringVector) IsEmpty() bool {
	return _swig_wrap_StringVector_isEmpty(arg1)
}

func _swig_wrap_StringVector_clear(SwigcptrStringVector)

func (arg1 SwigcptrStringVector) Clear() {
	_swig_wrap_StringVector_clear(arg1)
}

func _swig_wrap_StringVector_add(SwigcptrStringVector, string)

func (arg1 SwigcptrStringVector) Add(arg2 string) {
	_swig_wrap_StringVector_add(arg1, arg2)
}

func _swig_wrap_StringVector_get(SwigcptrStringVector, int) string

func (arg1 SwigcptrStringVector) Get(arg2 int) string {
	return _swig_wrap_StringVector_get(arg1, arg2)
}

func _swig_wrap_StringVector_set(SwigcptrStringVector, int, string)

func (arg1 SwigcptrStringVector) Set(arg2 int, arg3 string) {
	_swig_wrap_StringVector_set(arg1, arg2, arg3)
}

func _swig_wrap_delete_StringVector(uintptr)

func DeleteStringVector(arg1 StringVector) {
	_swig_wrap_delete_StringVector(arg1.Swigcptr())
}

type StringVector interface {
	Swigcptr() uintptr
	SwigIsStringVector()
	Size() int
	Capacity() int
	Reserve(arg2 int)
	IsEmpty() bool
	Clear()
	Add(arg2 string)
	Get(arg2 int) string
	Set(arg2 int, arg3 string)
}

type SwigcptrBSONArrayObj uintptr

func (p SwigcptrBSONArrayObj) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrBSONArrayObj) SwigIsBSONArrayObj() {
}

func _swig_wrap_new_BSONArrayObj__SWIG_0() SwigcptrBSONArrayObj

func NewBSONArrayObj__SWIG_0() BSONArrayObj {
	return _swig_wrap_new_BSONArrayObj__SWIG_0()
}

func _swig_wrap_delete_BSONArrayObj(uintptr)

func DeleteBSONArrayObj(arg1 BSONArrayObj) {
	_swig_wrap_delete_BSONArrayObj(arg1.Swigcptr())
}

func _swig_wrap_new_BSONArrayObj__SWIG_1(uintptr) SwigcptrBSONArrayObj

func NewBSONArrayObj__SWIG_1(arg1 BSONArrayObj) BSONArrayObj {
	return _swig_wrap_new_BSONArrayObj__SWIG_1(arg1.Swigcptr())
}

func NewBSONArrayObj(a ...interface{}) BSONArrayObj {
	argc := len(a)
	if argc == 0 {
		return NewBSONArrayObj__SWIG_0()
	}
	if argc == 1 {
		return NewBSONArrayObj__SWIG_1(a[0].(BSONArrayObj))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_BSONArrayObj_length(SwigcptrBSONArrayObj) int

func (arg1 SwigcptrBSONArrayObj) Length() int {
	return _swig_wrap_BSONArrayObj_length(arg1)
}

func _swig_wrap_BSONArrayObj_add(SwigcptrBSONArrayObj, uintptr)

func (arg1 SwigcptrBSONArrayObj) Add(arg2 BSONObj) {
	_swig_wrap_BSONArrayObj_add(arg1, arg2.Swigcptr())
}

func _swig_wrap_BSONArrayObj_addAll(SwigcptrBSONArrayObj, uintptr)

func (arg1 SwigcptrBSONArrayObj) AddAll(arg2 BSONArrayObj) {
	_swig_wrap_BSONArrayObj_addAll(arg1, arg2.Swigcptr())
}

func _swig_wrap_BSONArrayObj_get(SwigcptrBSONArrayObj, int) SwigcptrBSONObj

func (arg1 SwigcptrBSONArrayObj) Get(arg2 int) BSONObj {
	return _swig_wrap_BSONArrayObj_get(arg1, arg2)
}

func _swig_wrap_BSONArrayObj_toChar(SwigcptrBSONArrayObj) string

func (arg1 SwigcptrBSONArrayObj) ToChar() string {
	return _swig_wrap_BSONArrayObj_toChar(arg1)
}

func _swig_wrap_BSONArrayObj_Xselect(SwigcptrBSONArrayObj, string) SwigcptrBSONArrayObj

func (arg1 SwigcptrBSONArrayObj) Xselect(arg2 string) BSONArrayObj {
	return _swig_wrap_BSONArrayObj_Xselect(arg1, arg2)
}

func _swig_wrap_BSONArrayObj_begin__SWIG_0(SwigcptrBSONArrayObj) SwigcptrStd_vector_Sl_BSONObj_Sm__Sg__iterator

func (arg1 SwigcptrBSONArrayObj) Begin__SWIG_0() Std_vector_Sl_BSONObj_Sm__Sg__iterator {
	return _swig_wrap_BSONArrayObj_begin__SWIG_0(arg1)
}

func _swig_wrap_BSONArrayObj_end__SWIG_0(SwigcptrBSONArrayObj) SwigcptrStd_vector_Sl_BSONObj_Sm__Sg__iterator

func (arg1 SwigcptrBSONArrayObj) End__SWIG_0() Std_vector_Sl_BSONObj_Sm__Sg__iterator {
	return _swig_wrap_BSONArrayObj_end__SWIG_0(arg1)
}

func _swig_wrap_BSONArrayObj_begin__SWIG_1(SwigcptrBSONArrayObj) SwigcptrStd_vector_Sl_BSONObj_Sm__Sg__const_iterator

func (arg1 SwigcptrBSONArrayObj) Begin__SWIG_1() Std_vector_Sl_BSONObj_Sm__Sg__const_iterator {
	return _swig_wrap_BSONArrayObj_begin__SWIG_1(arg1)
}

func (p SwigcptrBSONArrayObj) Begin(a ...interface{}) interface{} {
	argc := len(a)
	if argc == 0 {
		return p.Begin__SWIG_0()
	}
	if argc == 0 {
		return p.Begin__SWIG_1()
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_BSONArrayObj_end__SWIG_1(SwigcptrBSONArrayObj) SwigcptrStd_vector_Sl_BSONObj_Sm__Sg__const_iterator

func (arg1 SwigcptrBSONArrayObj) End__SWIG_1() Std_vector_Sl_BSONObj_Sm__Sg__const_iterator {
	return _swig_wrap_BSONArrayObj_end__SWIG_1(arg1)
}

func (p SwigcptrBSONArrayObj) End(a ...interface{}) interface{} {
	argc := len(a)
	if argc == 0 {
		return p.End__SWIG_0()
	}
	if argc == 0 {
		return p.End__SWIG_1()
	}
	panic("No match for overloaded function call")
}

type BSONArrayObj interface {
	Swigcptr() uintptr
	SwigIsBSONArrayObj()
	Length() int
	Add(arg2 BSONObj)
	AddAll(arg2 BSONArrayObj)
	Get(arg2 int) BSONObj
	ToChar() string
	Xselect(arg2 string) BSONArrayObj
	Begin(a ...interface{}) interface{}
	End(a ...interface{}) interface{}
}

type SwigcptrBSONObj uintptr

func (p SwigcptrBSONObj) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrBSONObj) SwigIsBSONObj() {
}

func _swig_wrap_new_BSONObj__SWIG_0() SwigcptrBSONObj

func NewBSONObj__SWIG_0() BSONObj {
	return _swig_wrap_new_BSONObj__SWIG_0()
}

func _swig_wrap_new_BSONObj__SWIG_1(uintptr) SwigcptrBSONObj

func NewBSONObj__SWIG_1(arg1 BSONObj) BSONObj {
	return _swig_wrap_new_BSONObj__SWIG_1(arg1.Swigcptr())
}

func NewBSONObj(a ...interface{}) BSONObj {
	argc := len(a)
	if argc == 0 {
		return NewBSONObj__SWIG_0()
	}
	if argc == 1 {
		return NewBSONObj__SWIG_1(a[0].(BSONObj))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_delete_BSONObj(uintptr)

func DeleteBSONObj(arg1 BSONObj) {
	_swig_wrap_delete_BSONObj(arg1.Swigcptr())
}

func _swig_wrap_BSONObj_add__SWIG_0(SwigcptrBSONObj, string, int)

func (arg1 SwigcptrBSONObj) Add__SWIG_0(arg2 string, arg3 int) {
	_swig_wrap_BSONObj_add__SWIG_0(arg1, arg2, arg3)
}

func _swig_wrap_BSONObj_add__SWIG_1(SwigcptrBSONObj, string, float64)

func (arg1 SwigcptrBSONObj) Add__SWIG_1(arg2 string, arg3 float64) {
	_swig_wrap_BSONObj_add__SWIG_1(arg1, arg2, arg3)
}

func _swig_wrap_BSONObj_add__SWIG_2(SwigcptrBSONObj, string, int64)

func (arg1 SwigcptrBSONObj) Add__SWIG_2(arg2 string, arg3 int64) {
	_swig_wrap_BSONObj_add__SWIG_2(arg1, arg2, arg3)
}

func _swig_wrap_BSONObj_add__SWIG_3(SwigcptrBSONObj, string, string)

func (arg1 SwigcptrBSONObj) Add__SWIG_3(arg2 string, arg3 string) {
	_swig_wrap_BSONObj_add__SWIG_3(arg1, arg2, arg3)
}

func _swig_wrap_BSONObj_add__SWIG_4(SwigcptrBSONObj, string, string, int)

func (arg1 SwigcptrBSONObj) Add__SWIG_4(arg2 string, arg3 string, arg4 int) {
	_swig_wrap_BSONObj_add__SWIG_4(arg1, arg2, arg3, arg4)
}

func _swig_wrap_BSONObj_add__SWIG_5(SwigcptrBSONObj, string, uintptr)

func (arg1 SwigcptrBSONObj) Add__SWIG_5(arg2 string, arg3 BSONObj) {
	_swig_wrap_BSONObj_add__SWIG_5(arg1, arg2, arg3.Swigcptr())
}

func _swig_wrap_BSONObj_add__SWIG_6(SwigcptrBSONObj, string, uintptr)

func (arg1 SwigcptrBSONObj) Add__SWIG_6(arg2 string, arg3 BSONArrayObj) {
	_swig_wrap_BSONObj_add__SWIG_6(arg1, arg2, arg3.Swigcptr())
}

func _swig_wrap_BSONObj_add__SWIG_7(SwigcptrBSONObj, string, uintptr)

func (arg1 SwigcptrBSONObj) Add__SWIG_7(arg2 string, arg3 BSONContent) {
	_swig_wrap_BSONObj_add__SWIG_7(arg1, arg2, arg3.Swigcptr())
}

func _swig_wrap_BSONObj_add__SWIG_8(SwigcptrBSONObj, string, bool)

func (arg1 SwigcptrBSONObj) Add__SWIG_8(arg2 string, arg3 bool) {
	_swig_wrap_BSONObj_add__SWIG_8(arg1, arg2, arg3)
}

func (p SwigcptrBSONObj) Add(a ...interface{}) {
	argc := len(a)
	if argc == 2 {
		if _, ok := a[1].(SwigcptrBSONObj); !ok {
			goto check_1
		}
		p.Add__SWIG_5(a[0].(string), a[1].(BSONObj))
		return
	}
check_1:
	if argc == 2 {
		if _, ok := a[1].(SwigcptrBSONArrayObj); !ok {
			goto check_2
		}
		p.Add__SWIG_6(a[0].(string), a[1].(BSONArrayObj))
		return
	}
check_2:
	if argc == 2 {
		if _, ok := a[1].(SwigcptrBSONContent); !ok {
			goto check_3
		}
		p.Add__SWIG_7(a[0].(string), a[1].(BSONContent))
		return
	}
check_3:
	if argc == 2 {
		if _, ok := a[1].(bool); !ok {
			goto check_4
		}
		p.Add__SWIG_8(a[0].(string), a[1].(bool))
		return
	}
check_4:
	if argc == 2 {
		if _, ok := a[1].(int); !ok {
			goto check_5
		}
		p.Add__SWIG_0(a[0].(string), a[1].(int))
		return
	}
check_5:
	if argc == 2 {
		if _, ok := a[1].(int64); !ok {
			goto check_6
		}
		p.Add__SWIG_2(a[0].(string), a[1].(int64))
		return
	}
check_6:
	if argc == 2 {
		if _, ok := a[1].(float64); !ok {
			goto check_7
		}
		p.Add__SWIG_1(a[0].(string), a[1].(float64))
		return
	}
check_7:
	if argc == 2 {
		p.Add__SWIG_3(a[0].(string), a[1].(string))
		return
	}
	if argc == 3 {
		p.Add__SWIG_4(a[0].(string), a[1].(string), a[2].(int))
		return
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_BSONObj_has(SwigcptrBSONObj, string) bool

func (arg1 SwigcptrBSONObj) Has(arg2 string) bool {
	return _swig_wrap_BSONObj_has(arg1, arg2)
}

func _swig_wrap_BSONObj_getBoolean(SwigcptrBSONObj, string) bool

func (arg1 SwigcptrBSONObj) GetBoolean(arg2 string) bool {
	return _swig_wrap_BSONObj_getBoolean(arg1, arg2)
}

func _swig_wrap_BSONObj_getInt(SwigcptrBSONObj, string) int

func (arg1 SwigcptrBSONObj) GetInt(arg2 string) int {
	return _swig_wrap_BSONObj_getInt(arg1, arg2)
}

func _swig_wrap_BSONObj_getDouble(SwigcptrBSONObj, string) float64

func (arg1 SwigcptrBSONObj) GetDouble(arg2 string) float64 {
	return _swig_wrap_BSONObj_getDouble(arg1, arg2)
}

func _swig_wrap_BSONObj_getLong(SwigcptrBSONObj, string) int64

func (arg1 SwigcptrBSONObj) GetLong(arg2 string) int64 {
	return _swig_wrap_BSONObj_getLong(arg1, arg2)
}

func _swig_wrap_BSONObj_getString(SwigcptrBSONObj, string) string

func (arg1 SwigcptrBSONObj) GetString(arg2 string) string {
	return _swig_wrap_BSONObj_getString(arg1, arg2)
}

func _swig_wrap_BSONObj_getBSON(SwigcptrBSONObj, string) SwigcptrBSONObj

func (arg1 SwigcptrBSONObj) GetBSON(arg2 string) BSONObj {
	return _swig_wrap_BSONObj_getBSON(arg1, arg2)
}

func _swig_wrap_BSONObj_getBSONArray(SwigcptrBSONObj, string) SwigcptrBSONArrayObj

func (arg1 SwigcptrBSONObj) GetBSONArray(arg2 string) BSONArrayObj {
	return _swig_wrap_BSONObj_getBSONArray(arg1, arg2)
}

func _swig_wrap_BSONObj_get(SwigcptrBSONObj, string) SwigcptrBSONContent

func (arg1 SwigcptrBSONObj) Get(arg2 string) BSONContent {
	return _swig_wrap_BSONObj_get(arg1, arg2)
}

func _swig_wrap_BSONObj_getContent__SWIG_0(SwigcptrBSONObj, string) SwigcptrBSONContent

func (arg1 SwigcptrBSONObj) GetContent__SWIG_0(arg2 string) BSONContent {
	return _swig_wrap_BSONObj_getContent__SWIG_0(arg1, arg2)
}

func _swig_wrap_BSONObj_getContent__SWIG_1(SwigcptrBSONObj, string, uintptr) SwigcptrBSONContent

func (arg1 SwigcptrBSONObj) GetContent__SWIG_1(arg2 string, arg3 BSONTYPE) BSONContent {
	return _swig_wrap_BSONObj_getContent__SWIG_1(arg1, arg2, arg3.Swigcptr())
}

func (p SwigcptrBSONObj) GetContent(a ...interface{}) BSONContent {
	argc := len(a)
	if argc == 1 {
		return p.GetContent__SWIG_0(a[0].(string))
	}
	if argc == 2 {
		return p.GetContent__SWIG_1(a[0].(string), a[1].(BSONTYPE))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_BSONObj_getXpath(SwigcptrBSONObj, string) SwigcptrBSONContent

func (arg1 SwigcptrBSONObj) GetXpath(arg2 string) BSONContent {
	return _swig_wrap_BSONObj_getXpath(arg1, arg2)
}

func _swig_wrap_BSONObj_Xselect(SwigcptrBSONObj, string) SwigcptrBSONObj

func (arg1 SwigcptrBSONObj) Xselect(arg2 string) BSONObj {
	return _swig_wrap_BSONObj_Xselect(arg1, arg2)
}

func _swig_wrap_BSONObj_Xtype(SwigcptrBSONObj, string) SwigcptrBSONTYPE

func (arg1 SwigcptrBSONObj) Xtype(arg2 string) BSONTYPE {
	return _swig_wrap_BSONObj_Xtype(arg1, arg2)
}

func _swig_wrap_BSONObj_toChar(SwigcptrBSONObj) string

func (arg1 SwigcptrBSONObj) ToChar() string {
	return _swig_wrap_BSONObj_toChar(arg1)
}

func _swig_wrap_BSONObj_begin(SwigcptrBSONObj) SwigcptrStd_map_Sl_std_string_Sc_BSONContent_Sm__Sg__const_iterator

func (arg1 SwigcptrBSONObj) Begin() Std_map_Sl_std_string_Sc_BSONContent_Sm__Sg__const_iterator {
	return _swig_wrap_BSONObj_begin(arg1)
}

func _swig_wrap_BSONObj_end(SwigcptrBSONObj) SwigcptrStd_map_Sl_std_string_Sc_BSONContent_Sm__Sg__const_iterator

func (arg1 SwigcptrBSONObj) End() Std_map_Sl_std_string_Sc_BSONContent_Sm__Sg__const_iterator {
	return _swig_wrap_BSONObj_end(arg1)
}

func _swig_wrap_BSONObj_length(SwigcptrBSONObj) int

func (arg1 SwigcptrBSONObj) Length() int {
	return _swig_wrap_BSONObj_length(arg1)
}

type BSONObj interface {
	Swigcptr() uintptr
	SwigIsBSONObj()
	Add(a ...interface{})
	Has(arg2 string) bool
	GetBoolean(arg2 string) bool
	GetInt(arg2 string) int
	GetDouble(arg2 string) float64
	GetLong(arg2 string) int64
	GetString(arg2 string) string
	GetBSON(arg2 string) BSONObj
	GetBSONArray(arg2 string) BSONArrayObj
	Get(arg2 string) BSONContent
	GetContent(a ...interface{}) BSONContent
	GetXpath(arg2 string) BSONContent
	Xselect(arg2 string) BSONObj
	Xtype(arg2 string) BSONTYPE
	ToChar() string
	Begin() Std_map_Sl_std_string_Sc_BSONContent_Sm__Sg__const_iterator
	End() Std_map_Sl_std_string_Sc_BSONContent_Sm__Sg__const_iterator
	Length() int
}

type SwigcptrBSONParser uintptr

func (p SwigcptrBSONParser) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrBSONParser) SwigIsBSONParser() {
}

func _swig_wrap_new_BSONParser() SwigcptrBSONParser

func NewBSONParser() BSONParser {
	return _swig_wrap_new_BSONParser()
}

func _swig_wrap_delete_BSONParser(uintptr)

func DeleteBSONParser(arg1 BSONParser) {
	_swig_wrap_delete_BSONParser(arg1.Swigcptr())
}

func _swig_wrap_BSONParser_parse(string) SwigcptrBSONObj

func BSONParserParse(arg1 string) BSONObj {
	return _swig_wrap_BSONParser_parse(arg1)
}

func _swig_wrap_BSONParser_parseArray(string) SwigcptrBSONArrayObj

func BSONParserParseArray(arg1 string) BSONArrayObj {
	return _swig_wrap_BSONParser_parseArray(arg1)
}

type BSONParser interface {
	Swigcptr() uintptr
	SwigIsBSONParser()
}

type FILTER_OPERATORS int
func _swig_getFO_NONE() FILTER_OPERATORS
var FO_NONE FILTER_OPERATORS = _swig_getFO_NONE()
func _swig_getFO_TOKEN() FILTER_OPERATORS
var FO_TOKEN FILTER_OPERATORS = _swig_getFO_TOKEN()
func _swig_getFO_AND() FILTER_OPERATORS
var FO_AND FILTER_OPERATORS = _swig_getFO_AND()
func _swig_getFO_OR() FILTER_OPERATORS
var FO_OR FILTER_OPERATORS = _swig_getFO_OR()
func _swig_getFO_EQUALS() FILTER_OPERATORS
var FO_EQUALS FILTER_OPERATORS = _swig_getFO_EQUALS()
func _swig_getFO_NOT_EQUALS() FILTER_OPERATORS
var FO_NOT_EQUALS FILTER_OPERATORS = _swig_getFO_NOT_EQUALS()
func _swig_getFO_PARENTESIS_OPEN() FILTER_OPERATORS
var FO_PARENTESIS_OPEN FILTER_OPERATORS = _swig_getFO_PARENTESIS_OPEN()
func _swig_getFO_PARENTESIS_CLOSE() FILTER_OPERATORS
var FO_PARENTESIS_CLOSE FILTER_OPERATORS = _swig_getFO_PARENTESIS_CLOSE()
func _swig_getFO_NOT() FILTER_OPERATORS
var FO_NOT FILTER_OPERATORS = _swig_getFO_NOT()
func _swig_getFO_LESSTHAN() FILTER_OPERATORS
var FO_LESSTHAN FILTER_OPERATORS = _swig_getFO_LESSTHAN()
func _swig_getFO_LESSEQUALTHAN() FILTER_OPERATORS
var FO_LESSEQUALTHAN FILTER_OPERATORS = _swig_getFO_LESSEQUALTHAN()
func _swig_getFO_GREATERTHAN() FILTER_OPERATORS
var FO_GREATERTHAN FILTER_OPERATORS = _swig_getFO_GREATERTHAN()
func _swig_getFO_GREATEREQUALTHAN() FILTER_OPERATORS
var FO_GREATEREQUALTHAN FILTER_OPERATORS = _swig_getFO_GREATEREQUALTHAN()
func _swig_getFO_EXISTS() FILTER_OPERATORS
var FO_EXISTS FILTER_OPERATORS = _swig_getFO_EXISTS()
type EXPRESSION_TYPE int
func _swig_getET_CONSTANT() EXPRESSION_TYPE
var ET_CONSTANT EXPRESSION_TYPE = _swig_getET_CONSTANT()
func _swig_getET_SIMPLE() EXPRESSION_TYPE
var ET_SIMPLE EXPRESSION_TYPE = _swig_getET_SIMPLE()
func _swig_getET_BINARY() EXPRESSION_TYPE
var ET_BINARY EXPRESSION_TYPE = _swig_getET_BINARY()
func _swig_getET_UNARY() EXPRESSION_TYPE
var ET_UNARY EXPRESSION_TYPE = _swig_getET_UNARY()
func ParseFilterOperator(string) FILTER_OPERATORS
type SwigcptrParseException uintptr

func (p SwigcptrParseException) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrParseException) SwigIsParseException() {
}

func _swig_wrap_new_ParseException__SWIG_0(int, string) SwigcptrParseException

func NewParseException__SWIG_0(arg1 int, arg2 string) ParseException {
	return _swig_wrap_new_ParseException__SWIG_0(arg1, arg2)
}

func _swig_wrap_new_ParseException__SWIG_1(uintptr) SwigcptrParseException

func NewParseException__SWIG_1(arg1 ParseException) ParseException {
	return _swig_wrap_new_ParseException__SWIG_1(arg1.Swigcptr())
}

func NewParseException(a ...interface{}) ParseException {
	argc := len(a)
	if argc == 1 {
		return NewParseException__SWIG_1(a[0].(ParseException))
	}
	if argc == 2 {
		return NewParseException__SWIG_0(a[0].(int), a[1].(string))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_ParseException_what(SwigcptrParseException) string

func (arg1 SwigcptrParseException) What() string {
	return _swig_wrap_ParseException_what(arg1)
}

func _swig_wrap_ParseException_errorCode(SwigcptrParseException) int

func (arg1 SwigcptrParseException) ErrorCode() int {
	return _swig_wrap_ParseException_errorCode(arg1)
}

func _swig_wrap_delete_ParseException(uintptr)

func DeleteParseException(arg1 ParseException) {
	_swig_wrap_delete_ParseException(arg1.Swigcptr())
}

type ParseException interface {
	Swigcptr() uintptr
	SwigIsParseException()
	What() string
	ErrorCode() int
}

func _swig_wrap_bson_splitSelect(string) SwigcptrStd_set_Sl_std_string_Sg_

func Bson_splitSelect(arg1 string) Std_set_Sl_std_string_Sg_ {
	return _swig_wrap_bson_splitSelect(arg1)
}

func Bson_subselect(string, string) string
func _swig_wrap_convert(uintptr, uintptr, uintptr) uintptr

func Convert(arg1 BSONTYPE, arg2 BSONTYPE, arg3 uintptr) uintptr {
	return _swig_wrap_convert(arg1.Swigcptr(), arg2.Swigcptr(), arg3)
}

const SERVER_PORT int = 1243
type SwigcptrDjondbConnection uintptr

func (p SwigcptrDjondbConnection) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrDjondbConnection) SwigIsDjondbConnection() {
}

func _swig_wrap_new_DjondbConnection__SWIG_0(string) SwigcptrDjondbConnection

func NewDjondbConnection__SWIG_0(arg1 string) DjondbConnection {
	return _swig_wrap_new_DjondbConnection__SWIG_0(arg1)
}

func _swig_wrap_new_DjondbConnection__SWIG_1(string, int) SwigcptrDjondbConnection

func NewDjondbConnection__SWIG_1(arg1 string, arg2 int) DjondbConnection {
	return _swig_wrap_new_DjondbConnection__SWIG_1(arg1, arg2)
}

func _swig_wrap_new_DjondbConnection__SWIG_2(uintptr) SwigcptrDjondbConnection

func NewDjondbConnection__SWIG_2(arg1 DjondbConnection) DjondbConnection {
	return _swig_wrap_new_DjondbConnection__SWIG_2(arg1.Swigcptr())
}

func NewDjondbConnection(a ...interface{}) DjondbConnection {
	argc := len(a)
	if argc == 1 {
		if _, ok := a[0].(string); !ok {
			goto check_1
		}
		return NewDjondbConnection__SWIG_0(a[0].(string))
	}
check_1:
	if argc == 1 {
		return NewDjondbConnection__SWIG_2(a[0].(DjondbConnection))
	}
	if argc == 2 {
		return NewDjondbConnection__SWIG_1(a[0].(string), a[1].(int))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_delete_DjondbConnection(uintptr)

func DeleteDjondbConnection(arg1 DjondbConnection) {
	_swig_wrap_delete_DjondbConnection(arg1.Swigcptr())
}

func _swig_wrap_DjondbConnection_beginTransaction(SwigcptrDjondbConnection) string

func (arg1 SwigcptrDjondbConnection) BeginTransaction() string {
	return _swig_wrap_DjondbConnection_beginTransaction(arg1)
}

func _swig_wrap_DjondbConnection_commitTransaction(SwigcptrDjondbConnection)

func (arg1 SwigcptrDjondbConnection) CommitTransaction() {
	_swig_wrap_DjondbConnection_commitTransaction(arg1)
}

func _swig_wrap_DjondbConnection_rollbackTransaction(SwigcptrDjondbConnection)

func (arg1 SwigcptrDjondbConnection) RollbackTransaction() {
	_swig_wrap_DjondbConnection_rollbackTransaction(arg1)
}

func _swig_wrap_DjondbConnection_open(SwigcptrDjondbConnection) bool

func (arg1 SwigcptrDjondbConnection) Open() bool {
	return _swig_wrap_DjondbConnection_open(arg1)
}

func _swig_wrap_DjondbConnection_close(SwigcptrDjondbConnection)

func (arg1 SwigcptrDjondbConnection) Close() {
	_swig_wrap_DjondbConnection_close(arg1)
}

func _swig_wrap_DjondbConnection_internalClose(SwigcptrDjondbConnection)

func (arg1 SwigcptrDjondbConnection) InternalClose() {
	_swig_wrap_DjondbConnection_internalClose(arg1)
}

func _swig_wrap_DjondbConnection_isOpen(SwigcptrDjondbConnection) bool

func (arg1 SwigcptrDjondbConnection) IsOpen() bool {
	return _swig_wrap_DjondbConnection_isOpen(arg1)
}

func _swig_wrap_DjondbConnection_shutdown(SwigcptrDjondbConnection) bool

func (arg1 SwigcptrDjondbConnection) Shutdown() bool {
	return _swig_wrap_DjondbConnection_shutdown(arg1)
}

func _swig_wrap_DjondbConnection_insert__SWIG_0(SwigcptrDjondbConnection, string, string, string) bool

func (arg1 SwigcptrDjondbConnection) Insert__SWIG_0(arg2 string, arg3 string, arg4 string) bool {
	return _swig_wrap_DjondbConnection_insert__SWIG_0(arg1, arg2, arg3, arg4)
}

func _swig_wrap_DjondbConnection_insert__SWIG_1(SwigcptrDjondbConnection, string, string, uintptr) bool

func (arg1 SwigcptrDjondbConnection) Insert__SWIG_1(arg2 string, arg3 string, arg4 BSONObj) bool {
	return _swig_wrap_DjondbConnection_insert__SWIG_1(arg1, arg2, arg3, arg4.Swigcptr())
}

func (p SwigcptrDjondbConnection) Insert(a ...interface{}) bool {
	argc := len(a)
	if argc == 3 {
		if _, ok := a[2].(string); !ok {
			goto check_1
		}
		return p.Insert__SWIG_0(a[0].(string), a[1].(string), a[2].(string))
	}
check_1:
	if argc == 3 {
		return p.Insert__SWIG_1(a[0].(string), a[1].(string), a[2].(BSONObj))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_DjondbConnection_findByKey__SWIG_0(SwigcptrDjondbConnection, string, string, string, string) SwigcptrBSONObj

func (arg1 SwigcptrDjondbConnection) FindByKey__SWIG_0(arg2 string, arg3 string, arg4 string, arg5 string) BSONObj {
	return _swig_wrap_DjondbConnection_findByKey__SWIG_0(arg1, arg2, arg3, arg4, arg5)
}

func _swig_wrap_DjondbConnection_findByKey__SWIG_1(SwigcptrDjondbConnection, string, string, string) SwigcptrBSONObj

func (arg1 SwigcptrDjondbConnection) FindByKey__SWIG_1(arg2 string, arg3 string, arg4 string) BSONObj {
	return _swig_wrap_DjondbConnection_findByKey__SWIG_1(arg1, arg2, arg3, arg4)
}

func (p SwigcptrDjondbConnection) FindByKey(a ...interface{}) BSONObj {
	argc := len(a)
	if argc == 3 {
		return p.FindByKey__SWIG_1(a[0].(string), a[1].(string), a[2].(string))
	}
	if argc == 4 {
		return p.FindByKey__SWIG_0(a[0].(string), a[1].(string), a[2].(string), a[3].(string))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_DjondbConnection_find__SWIG_0(SwigcptrDjondbConnection, string, string) SwigcptrDjondbCursor

func (arg1 SwigcptrDjondbConnection) Find__SWIG_0(arg2 string, arg3 string) DjondbCursor {
	return _swig_wrap_DjondbConnection_find__SWIG_0(arg1, arg2, arg3)
}

func _swig_wrap_DjondbConnection_find__SWIG_1(SwigcptrDjondbConnection, string, string, uintptr) SwigcptrDjondbCursor

func (arg1 SwigcptrDjondbConnection) Find__SWIG_1(arg2 string, arg3 string, arg4 BSONObj) DjondbCursor {
	return _swig_wrap_DjondbConnection_find__SWIG_1(arg1, arg2, arg3, arg4.Swigcptr())
}

func _swig_wrap_DjondbConnection_find__SWIG_2(SwigcptrDjondbConnection, string, string, string) SwigcptrDjondbCursor

func (arg1 SwigcptrDjondbConnection) Find__SWIG_2(arg2 string, arg3 string, arg4 string) DjondbCursor {
	return _swig_wrap_DjondbConnection_find__SWIG_2(arg1, arg2, arg3, arg4)
}

func _swig_wrap_DjondbConnection_find__SWIG_3(SwigcptrDjondbConnection, string, string, string, uintptr) SwigcptrDjondbCursor

func (arg1 SwigcptrDjondbConnection) Find__SWIG_3(arg2 string, arg3 string, arg4 string, arg5 BSONObj) DjondbCursor {
	return _swig_wrap_DjondbConnection_find__SWIG_3(arg1, arg2, arg3, arg4, arg5.Swigcptr())
}

func _swig_wrap_DjondbConnection_find__SWIG_4(SwigcptrDjondbConnection, string, string, string, string) SwigcptrDjondbCursor

func (arg1 SwigcptrDjondbConnection) Find__SWIG_4(arg2 string, arg3 string, arg4 string, arg5 string) DjondbCursor {
	return _swig_wrap_DjondbConnection_find__SWIG_4(arg1, arg2, arg3, arg4, arg5)
}

func _swig_wrap_DjondbConnection_find__SWIG_5(SwigcptrDjondbConnection, string, string, string, string, uintptr) SwigcptrDjondbCursor

func (arg1 SwigcptrDjondbConnection) Find__SWIG_5(arg2 string, arg3 string, arg4 string, arg5 string, arg6 BSONObj) DjondbCursor {
	return _swig_wrap_DjondbConnection_find__SWIG_5(arg1, arg2, arg3, arg4, arg5, arg6.Swigcptr())
}

func (p SwigcptrDjondbConnection) Find(a ...interface{}) DjondbCursor {
	argc := len(a)
	if argc == 2 {
		return p.Find__SWIG_0(a[0].(string), a[1].(string))
	}
	if argc == 3 {
		if _, ok := a[2].(SwigcptrBSONObj); !ok {
			goto check_2
		}
		return p.Find__SWIG_1(a[0].(string), a[1].(string), a[2].(BSONObj))
	}
check_2:
	if argc == 3 {
		return p.Find__SWIG_2(a[0].(string), a[1].(string), a[2].(string))
	}
	if argc == 4 {
		if _, ok := a[3].(SwigcptrBSONObj); !ok {
			goto check_4
		}
		return p.Find__SWIG_3(a[0].(string), a[1].(string), a[2].(string), a[3].(BSONObj))
	}
check_4:
	if argc == 4 {
		return p.Find__SWIG_4(a[0].(string), a[1].(string), a[2].(string), a[3].(string))
	}
	if argc == 5 {
		return p.Find__SWIG_5(a[0].(string), a[1].(string), a[2].(string), a[3].(string), a[4].(BSONObj))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_DjondbConnection_update__SWIG_0(SwigcptrDjondbConnection, string, string, string) bool

func (arg1 SwigcptrDjondbConnection) Update__SWIG_0(arg2 string, arg3 string, arg4 string) bool {
	return _swig_wrap_DjondbConnection_update__SWIG_0(arg1, arg2, arg3, arg4)
}

func _swig_wrap_DjondbConnection_update__SWIG_1(SwigcptrDjondbConnection, string, string, uintptr) bool

func (arg1 SwigcptrDjondbConnection) Update__SWIG_1(arg2 string, arg3 string, arg4 BSONObj) bool {
	return _swig_wrap_DjondbConnection_update__SWIG_1(arg1, arg2, arg3, arg4.Swigcptr())
}

func (p SwigcptrDjondbConnection) Update(a ...interface{}) bool {
	argc := len(a)
	if argc == 3 {
		if _, ok := a[2].(string); !ok {
			goto check_1
		}
		return p.Update__SWIG_0(a[0].(string), a[1].(string), a[2].(string))
	}
check_1:
	if argc == 3 {
		return p.Update__SWIG_1(a[0].(string), a[1].(string), a[2].(BSONObj))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_DjondbConnection_remove(SwigcptrDjondbConnection, string, string, string, string) bool

func (arg1 SwigcptrDjondbConnection) Remove(arg2 string, arg3 string, arg4 string, arg5 string) bool {
	return _swig_wrap_DjondbConnection_remove(arg1, arg2, arg3, arg4, arg5)
}

func _swig_wrap_DjondbConnection_executeQuery(SwigcptrDjondbConnection, string) SwigcptrBSONArrayObj

func (arg1 SwigcptrDjondbConnection) ExecuteQuery(arg2 string) BSONArrayObj {
	return _swig_wrap_DjondbConnection_executeQuery(arg1, arg2)
}

func _swig_wrap_DjondbConnection_executeUpdate(SwigcptrDjondbConnection, string) bool

func (arg1 SwigcptrDjondbConnection) ExecuteUpdate(arg2 string) bool {
	return _swig_wrap_DjondbConnection_executeUpdate(arg1, arg2)
}

func _swig_wrap_DjondbConnection_dropNamespace(SwigcptrDjondbConnection, string, string) bool

func (arg1 SwigcptrDjondbConnection) DropNamespace(arg2 string, arg3 string) bool {
	return _swig_wrap_DjondbConnection_dropNamespace(arg1, arg2, arg3)
}

func _swig_wrap_DjondbConnection_dbs(SwigcptrDjondbConnection) SwigcptrStringVector

func (arg1 SwigcptrDjondbConnection) Dbs() StringVector {
	return _swig_wrap_DjondbConnection_dbs(arg1)
}

func _swig_wrap_DjondbConnection_namespaces(SwigcptrDjondbConnection, string) SwigcptrStringVector

func (arg1 SwigcptrDjondbConnection) Namespaces(arg2 string) StringVector {
	return _swig_wrap_DjondbConnection_namespaces(arg1, arg2)
}

func _swig_wrap_DjondbConnection_host(SwigcptrDjondbConnection) string

func (arg1 SwigcptrDjondbConnection) Host() string {
	return _swig_wrap_DjondbConnection_host(arg1)
}

type DjondbConnection interface {
	Swigcptr() uintptr
	SwigIsDjondbConnection()
	BeginTransaction() string
	CommitTransaction()
	RollbackTransaction()
	Open() bool
	Close()
	InternalClose()
	IsOpen() bool
	Shutdown() bool
	Insert(a ...interface{}) bool
	FindByKey(a ...interface{}) BSONObj
	Find(a ...interface{}) DjondbCursor
	Update(a ...interface{}) bool
	Remove(arg2 string, arg3 string, arg4 string, arg5 string) bool
	ExecuteQuery(arg2 string) BSONArrayObj
	ExecuteUpdate(arg2 string) bool
	DropNamespace(arg2 string, arg3 string) bool
	Dbs() StringVector
	Namespaces(arg2 string) StringVector
	Host() string
}

type SwigcptrDjondbCursor uintptr

func (p SwigcptrDjondbCursor) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrDjondbCursor) SwigIsDjondbCursor() {
}

type DjondbDjondbCursorCursorStatus int
func _swig_wrap_new_DjondbCursor__SWIG_0(uintptr, uintptr, uintptr, string, uintptr) SwigcptrDjondbCursor

func NewDjondbCursor__SWIG_0(arg1 NetworkOutputStream, arg2 NetworkInputStream, arg3 CommandWriter, arg4 string, arg5 BSONArrayObj) DjondbCursor {
	return _swig_wrap_new_DjondbCursor__SWIG_0(arg1.Swigcptr(), arg2.Swigcptr(), arg3.Swigcptr(), arg4, arg5.Swigcptr())
}

func _swig_wrap_new_DjondbCursor__SWIG_1(uintptr) SwigcptrDjondbCursor

func NewDjondbCursor__SWIG_1(arg1 DjondbCursor) DjondbCursor {
	return _swig_wrap_new_DjondbCursor__SWIG_1(arg1.Swigcptr())
}

func NewDjondbCursor(a ...interface{}) DjondbCursor {
	argc := len(a)
	if argc == 1 {
		return NewDjondbCursor__SWIG_1(a[0].(DjondbCursor))
	}
	if argc == 5 {
		return NewDjondbCursor__SWIG_0(a[0].(NetworkOutputStream), a[1].(NetworkInputStream), a[2].(CommandWriter), a[3].(string), a[4].(BSONArrayObj))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_delete_DjondbCursor(uintptr)

func DeleteDjondbCursor(arg1 DjondbCursor) {
	_swig_wrap_delete_DjondbCursor(arg1.Swigcptr())
}

func _swig_wrap_DjondbCursor_next(SwigcptrDjondbCursor) bool

func (arg1 SwigcptrDjondbCursor) Next() bool {
	return _swig_wrap_DjondbCursor_next(arg1)
}

func _swig_wrap_DjondbCursor_previous(SwigcptrDjondbCursor) bool

func (arg1 SwigcptrDjondbCursor) Previous() bool {
	return _swig_wrap_DjondbCursor_previous(arg1)
}

func _swig_wrap_DjondbCursor_current(SwigcptrDjondbCursor) SwigcptrBSONObj

func (arg1 SwigcptrDjondbCursor) Current() BSONObj {
	return _swig_wrap_DjondbCursor_current(arg1)
}

func _swig_wrap_DjondbCursor_length(SwigcptrDjondbCursor) int

func (arg1 SwigcptrDjondbCursor) Length() int {
	return _swig_wrap_DjondbCursor_length(arg1)
}

func _swig_wrap_DjondbCursor_releaseCursor(SwigcptrDjondbCursor)

func (arg1 SwigcptrDjondbCursor) ReleaseCursor() {
	_swig_wrap_DjondbCursor_releaseCursor(arg1)
}

func _swig_wrap_DjondbCursor_seek(SwigcptrDjondbCursor, int)

func (arg1 SwigcptrDjondbCursor) Seek(arg2 int) {
	_swig_wrap_DjondbCursor_seek(arg1, arg2)
}

type DjondbCursor interface {
	Swigcptr() uintptr
	SwigIsDjondbCursor()
	Next() bool
	Previous() bool
	Current() BSONObj
	Length() int
	ReleaseCursor()
	Seek(arg2 int)
}

type SwigcptrConnectionReference uintptr

func (p SwigcptrConnectionReference) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrConnectionReference) SwigIsConnectionReference() {
}

func _swig_wrap_ConnectionReference__connection_set(SwigcptrConnectionReference, uintptr)

func (arg1 SwigcptrConnectionReference) SetX_connection(arg2 DjondbConnection) {
	_swig_wrap_ConnectionReference__connection_set(arg1, arg2.Swigcptr())
}

func _swig_wrap_ConnectionReference__connection_get(SwigcptrConnectionReference) SwigcptrDjondbConnection

func (arg1 SwigcptrConnectionReference) GetX_connection() DjondbConnection {
	return _swig_wrap_ConnectionReference__connection_get(arg1)
}

func _swig_wrap_ConnectionReference__references_set(SwigcptrConnectionReference, int)

func (arg1 SwigcptrConnectionReference) SetX_references(arg2 int) {
	_swig_wrap_ConnectionReference__references_set(arg1, arg2)
}

func _swig_wrap_ConnectionReference__references_get(SwigcptrConnectionReference) int

func (arg1 SwigcptrConnectionReference) GetX_references() int {
	return _swig_wrap_ConnectionReference__references_get(arg1)
}

func _swig_wrap_new_ConnectionReference() SwigcptrConnectionReference

func NewConnectionReference() ConnectionReference {
	return _swig_wrap_new_ConnectionReference()
}

func _swig_wrap_delete_ConnectionReference(uintptr)

func DeleteConnectionReference(arg1 ConnectionReference) {
	_swig_wrap_delete_ConnectionReference(arg1.Swigcptr())
}

type ConnectionReference interface {
	Swigcptr() uintptr
	SwigIsConnectionReference()
	SetX_connection(arg2 DjondbConnection)
	GetX_connection() DjondbConnection
	SetX_references(arg2 int)
	GetX_references() int
}

type SwigcptrDjondbConnectionManager uintptr

func (p SwigcptrDjondbConnectionManager) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrDjondbConnectionManager) SwigIsDjondbConnectionManager() {
}

func _swig_wrap_new_DjondbConnectionManager() SwigcptrDjondbConnectionManager

func NewDjondbConnectionManager() DjondbConnectionManager {
	return _swig_wrap_new_DjondbConnectionManager()
}

func _swig_wrap_delete_DjondbConnectionManager(uintptr)

func DeleteDjondbConnectionManager(arg1 DjondbConnectionManager) {
	_swig_wrap_delete_DjondbConnectionManager(arg1.Swigcptr())
}

func _swig_wrap_DjondbConnectionManager_getConnection__SWIG_0(string) SwigcptrDjondbConnection

func DjondbConnectionManagerGetConnection__SWIG_0(arg1 string) DjondbConnection {
	return _swig_wrap_DjondbConnectionManager_getConnection__SWIG_0(arg1)
}

func _swig_wrap_DjondbConnectionManager_getConnection__SWIG_1(string, int) SwigcptrDjondbConnection

func DjondbConnectionManagerGetConnection__SWIG_1(arg1 string, arg2 int) DjondbConnection {
	return _swig_wrap_DjondbConnectionManager_getConnection__SWIG_1(arg1, arg2)
}

func DjondbConnectionManagerGetConnection(a ...interface{}) DjondbConnection {
	argc := len(a)
	if argc == 1 {
		return DjondbConnectionManagerGetConnection__SWIG_0(a[0].(string))
	}
	if argc == 2 {
		return DjondbConnectionManagerGetConnection__SWIG_1(a[0].(string), a[1].(int))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_DjondbConnectionManager_releaseConnection(uintptr)

func DjondbConnectionManagerReleaseConnection(arg1 DjondbConnection) {
	_swig_wrap_DjondbConnectionManager_releaseConnection(arg1.Swigcptr())
}

type DjondbConnectionManager interface {
	Swigcptr() uintptr
	SwigIsDjondbConnectionManager()
}


type SwigcptrStd_set_Sl_std_string_Sg_ uintptr
type Std_set_Sl_std_string_Sg_ interface {
	Swigcptr() uintptr;
}
func (p SwigcptrStd_set_Sl_std_string_Sg_) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrBSONTYPE uintptr
type BSONTYPE interface {
	Swigcptr() uintptr;
}
func (p SwigcptrBSONTYPE) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrVoid uintptr
type Void interface {
	Swigcptr() uintptr;
}
func (p SwigcptrVoid) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrBSONContent uintptr
type BSONContent interface {
	Swigcptr() uintptr;
}
func (p SwigcptrBSONContent) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrNetworkOutputStream uintptr
type NetworkOutputStream interface {
	Swigcptr() uintptr;
}
func (p SwigcptrNetworkOutputStream) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrNetworkInputStream uintptr
type NetworkInputStream interface {
	Swigcptr() uintptr;
}
func (p SwigcptrNetworkInputStream) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCommandWriter uintptr
type CommandWriter interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCommandWriter) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrStd_vector_Sl_BSONObj_Sm__Sg__const_iterator uintptr
type Std_vector_Sl_BSONObj_Sm__Sg__const_iterator interface {
	Swigcptr() uintptr;
}
func (p SwigcptrStd_vector_Sl_BSONObj_Sm__Sg__const_iterator) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrStd_vector_Sl_BSONObj_Sm__Sg__iterator uintptr
type Std_vector_Sl_BSONObj_Sm__Sg__iterator interface {
	Swigcptr() uintptr;
}
func (p SwigcptrStd_vector_Sl_BSONObj_Sm__Sg__iterator) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrStd_map_Sl_std_string_Sc_BSONContent_Sm__Sg__const_iterator uintptr
type Std_map_Sl_std_string_Sc_BSONContent_Sm__Sg__const_iterator interface {
	Swigcptr() uintptr;
}
func (p SwigcptrStd_map_Sl_std_string_Sc_BSONContent_Sm__Sg__const_iterator) Swigcptr() uintptr {
	return uintptr(p)
}

